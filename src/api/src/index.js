/**
 * TasksServer API
 * API for managing users and tasks. Provides basic CRUD operations for both entities. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import HealthzGet200Response from './model/HealthzGet200Response';
import Task from './model/Task';
import TaskCreate from './model/TaskCreate';
import TaskUpdate from './model/TaskUpdate';
import User from './model/User';
import UserCreate from './model/UserCreate';
import UserUpdate from './model/UserUpdate';
import DefaultApi from './api/DefaultApi';
import TasksApi from './api/TasksApi';
import UsersApi from './api/UsersApi';


/**
* API for managing users and tasks. Provides basic CRUD operations for both entities. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var TasksServerApi = require('index'); // See note below*.
* var xxxSvc = new TasksServerApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new TasksServerApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new TasksServerApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new TasksServerApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The HealthzGet200Response model constructor.
     * @property {module:model/HealthzGet200Response}
     */
    HealthzGet200Response,

    /**
     * The Task model constructor.
     * @property {module:model/Task}
     */
    Task,

    /**
     * The TaskCreate model constructor.
     * @property {module:model/TaskCreate}
     */
    TaskCreate,

    /**
     * The TaskUpdate model constructor.
     * @property {module:model/TaskUpdate}
     */
    TaskUpdate,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
     * The UserCreate model constructor.
     * @property {module:model/UserCreate}
     */
    UserCreate,

    /**
     * The UserUpdate model constructor.
     * @property {module:model/UserUpdate}
     */
    UserUpdate,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi,

    /**
    * The TasksApi service constructor.
    * @property {module:api/TasksApi}
    */
    TasksApi,

    /**
    * The UsersApi service constructor.
    * @property {module:api/UsersApi}
    */
    UsersApi
};
